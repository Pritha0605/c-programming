


typedef struct {
    int data[100];
    int top;
    int bottom;    
} MyQueue;

MyQueue* myQueueCreate() {
    MyQueue *s = (MyQueue *)malloc(sizeof(MyQueue));
    s->top = 0;
    s->bottom = 0;    
    return s;
}

void myQueuePush(MyQueue* obj, int x) {
    int i;
    int a;
    int p,q;
    p = obj->top;
    q = obj->bottom;
    for(i = p;i > q;i--){
        a = obj->data[i-1];
        obj->data[i] = a;
    }
    obj->data[q] = x;
    (obj->top)++;
}

int myQueuePop(MyQueue* obj) {
    int p;
    (obj->top)--;
    p = obj->top;
    return obj->data[p];
}

int myQueuePeek(MyQueue* obj) {
    int p;
    p = obj->top - 1;
    return obj->data[p];
}

bool myQueueEmpty(MyQueue* obj) {
    int p,q;
    p = obj->top;
    q = obj->bottom;
    return (p == q) ? true : false;    
}

void myQueueFree(MyQueue* obj) {
    free(obj);
}

/**
 * Your MyQueue struct will be instantiated and called as such:
 * MyQueue* obj = myQueueCreate();
 * myQueuePush(obj, x);
 
 * int param_2 = myQueuePop(obj);
 
 * int param_3 = myQueuePeek(obj);
 
 * bool param_4 = myQueueEmpty(obj);
 
 * myQueueFree(obj);
*/
