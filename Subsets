int get_num_set_bits(int n, int num_bits)
{
    int c = 0;

    for(int i = 0; i < num_bits; i++)
    {
        if(n & (1<<i))
        {
            c++;
        }
    }

    return c;
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** subsets(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
    int n = (1<<numsSize); // to loop from 0 to 2^3 - 1

    *returnColumnSizes = malloc((n+1)*sizeof(int));
    *returnSize = n;

    int **array = malloc(sizeof(int*) * n);
    array[0] = NULL;
    (*returnColumnSizes)[0] = 0;

    for(int i = 1; i < n; i++)
    {
        int count = get_num_set_bits(i, numsSize);

        (*returnColumnSizes)[i] = count;
        int *temp = malloc(sizeof(int) * count);
        for(int j = 0; j < numsSize; j++)
        {
            if (i & (1 << j))
            {
                temp[--count] = nums[j];
            }
        }
        array[i] = temp;
        
    }   

    return array;
}
